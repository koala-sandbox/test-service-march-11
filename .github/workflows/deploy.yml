# This workflow will deploy a kustomize overlay to a kubernetes cluster.

name: Deploy

# Prevent concurrent deploys to the same environment.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.service_name }}-${{ github.event.inputs.overlay }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      service_name:
        description: "The name of the service"
        required: false
        type: string
      overlay:
        description: "The overlay to use for kustomize"
        required: true
        type: string
      tag:
        description: "The image tag to deploy"
        required: true
        type: string
      cluster_name:
        description: "The cluster name"
        required: true
        type: string
      cluster_location:
        description: "The cluster location (region/zone)"
        required: true
        type: string
      cloud_provider:
        description: "The cloud provider"
        required: true
        type: string
      dispatch_id:
        description: 'A unique ID provided when dispatching this workflow'
        required: false
        type: string
  workflow_call:
    inputs:
      service_name:
        description: "The name of the service"
        required: false
        type: string
      overlay:
        description: "The overlay to use for kustomize"
        required: true
        type: string
      tag:
        description: "The image tag to deploy"
        required: true
        type: string
      cluster_name:
        description: "The cluster name"
        required: true
        type: string
      cluster_location:
        description: "The cluster location (region/zone)"
        required: true
        type: string
      cloud_provider:
        description: "The cloud provider"
        required: true
        type: string
      ref:
        description: "The git ref to use"
        required: false
        type: string

jobs:
  deploy:
    permissions:
      contents: "write"
      id-token: "write"
    runs-on: ubuntu-latest
    env:
      NAME: ${{ inputs.service_name }}
      IMAGE: "me-west1-docker.pkg.dev/koala-ops-demo-373407/koala-repo/${{ inputs.service_name }}"
      DEPLOY_DIR: "deploy/overlays/${{ inputs.overlay }}"
      MANAGED_BY: ""
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          

      - name: Print inputs
        run: |
          echo "service_name: ${{ env.NAME }}"
          echo "overlay: ${{ inputs.overlay }}"
          echo "tag: ${{ inputs.tag }}"
          echo "cluster_name: ${{ inputs.cluster_name }}"
          echo "cluster_location: ${{ inputs.cluster_location }}"
          echo "cloud_provider: ${{ inputs.cloud_provider }}"
          echo "ref: ${{ inputs.ref }}"
          echo "dispatch_id: ${{ inputs.dispatch_id }}"

      # If Cloud Provider is GCP, authenticate to GCP and get the GKE credentials
      - name: Login to GCP
        if: inputs.cloud_provider == 'gcp' || inputs.cloud_provider == ''
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
      - name: Set up GKE credentials
        if: inputs.cloud_provider == 'gcp' || inputs.cloud_provider == ''
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ inputs.cluster_name }}
          location: ${{ inputs.cluster_location }}

      # If Cloud Provider is AWS, authenticate to AWS and get the EKS credentials
      - name: Login to AWS
        if: inputs.cloud_provider == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 
          role-duration-seconds: 1200
          role-session-name: GithubActions-${{ github.run_id }}
      - name: Set up EKS credentials and context
        if: inputs.cloud_provider == 'aws'
        run: |
          aws eks --region ${{ inputs.cluster_location }} update-kubeconfig --name ${{ inputs.cluster_name }}
          CONTEXT=arn:aws:eks:${{ inputs.cluster_location }}:$(aws sts get-caller-identity --query "Account" --output text):cluster/${{ inputs.cluster_name }}
          kubectl config use-context $CONTEXT

      # Verify input overlay exists in repo
      - name: Verify input overlay exists in repo
        uses: andstor/file-existence-action@v2
        with:
          files: ${{ env.DEPLOY_DIR }}/kustomization.yaml

      # Update the image tag and version label in the kustomize overlay
      - name: Update image tag in Kustomize overlay
        run: |-
          cd $DEPLOY_DIR
          kustomize edit set image $IMAGE:${{ inputs.tag }}
          sed -i "s/app.kubernetes.io\/version:.*/app.kubernetes.io\/version: ${{ inputs.tag }}/g" kustomization.yaml
          kustomize edit set annotation last-deployed-by:${{ github.actor }}
          NAMESPACE=$(cat kustomization.yaml | grep namespace: | cut -d ":" -f 2 | tr -d '[:space:]')
          FULLNAME="$(cat kustomization.yaml | grep namePrefix: | cut -d ":" -f 2 | tr -d '[:space:]')$NAME"
          echo "NAMESPACE: $NAMESPACE"
          echo "FULLNAME: $FULLNAME"
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
          echo "FULLNAME=$FULLNAME" >> $GITHUB_ENV

      - name: Check for "managed-by" label
        id: check-managed-by-label
        run: |-
          MANAGED_BY=$(kubectl get deployments/$FULLNAME -n $NAMESPACE -o jsonpath='{.metadata.labels.app\.kubernetes\.io/managed-by}') || MANAGED_BY=""
          echo "MANAGED_BY=$MANAGED_BY" >> $GITHUB_ENV

      # If using GitOps with ArgoCD, push the new tag to the repo and allow ArgoCD to handle deployment
      - name: Push new tag to repo
        if: env.MANAGED_BY == 'argocd'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Update env '${{ inputs.overlay }}' to version '${{ inputs.tag }}' [skip ci]
          commit_user_name: GitHub Actions Bot
          file_pattern: ${{ env.DEPLOY_DIR }}

      # If not using GitOps, deploy the kustomize overlay to the cluster
      - name: Deploy overlay to cluster
        if: env.MANAGED_BY != 'argocd'
        run: |-
          echo "Using kubectl to deploy new tag '${{ inputs.tag }}' to cluster in env '${{ inputs.overlay }}'"
          kubectl kustomize $DEPLOY_DIR | kubectl apply -f -
          kubectl wait --timeout=120s --for=condition=ready pod -l app=$NAME -n $NAMESPACE
          kubectl describe deployments -l app=$NAME -n $NAMESPACE
